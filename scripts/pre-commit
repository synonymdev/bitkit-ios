#!/bin/bash

echo "üîç Checking staged Swift files for formatting issues..."

# Get list of staged .swift files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.swift$')

# Exit early if no Swift files are staged
if [ -z "$STAGED_FILES" ]; then
    echo "‚ú® No Swift files staged for commit."
    exit 0
fi

# Initialize error flag
HAS_ERRORS=0

# Create a temporary directory for staged content
TEMP_DIR=$(mktemp -d)
trap "rm -rf $TEMP_DIR" EXIT

# Copy .swiftformat config to temp directory
cp .swiftformat "$TEMP_DIR/"

for FILE in $STAGED_FILES; do
    if [ ! -f "$FILE" ]; then
        continue
    fi
    
    # Create directory structure in temp
    mkdir -p "$TEMP_DIR/$(dirname "$FILE")"
    
    # Get staged content of the file
    git show :"$FILE" > "$TEMP_DIR/$FILE" 2>/dev/null || {
        echo "‚ö†Ô∏è  Could not get staged content for $FILE, skipping..."
        continue
    }
    
    # Run swiftformat --lint on the staged content
    cd "$TEMP_DIR"
    LINT_OUTPUT=$(swiftformat --lint "$FILE" 2>&1)
    LINT_EXIT_CODE=$?
    cd - > /dev/null
    
    # Check if linting failed
    if [ $LINT_EXIT_CODE -ne 0 ]; then
        # Replace temp path with original path in output
        echo "$LINT_OUTPUT" | sed "s|$TEMP_DIR/||g"
        echo "‚ùå Formatting issues found in $FILE"
        HAS_ERRORS=1
    fi
done

# Exit with error if any files failed linting
if [ $HAS_ERRORS -eq 1 ]; then
    echo ""
    echo "üö´ Commit blocked: Formatting issues found in staged files."
    echo "Run 'swiftformat .' to fix formatting issues, then commit again."
    exit 1
fi

echo "‚ú® All staged changes passed formatting checks."
