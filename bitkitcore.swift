// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(bitkitcoreFFI)
import bitkitcoreFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_bitkitcore_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_bitkitcore_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}


public struct LightningActivity {
    public var id: String
    public var txType: PaymentType
    public var status: PaymentState
    public var value: UInt64
    public var fee: UInt64?
    public var invoice: String
    public var message: String
    public var timestamp: UInt64
    public var preimage: String?
    public var createdAt: UInt64?
    public var updatedAt: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, txType: PaymentType, status: PaymentState, value: UInt64, fee: UInt64?, invoice: String, message: String, timestamp: UInt64, preimage: String?, createdAt: UInt64?, updatedAt: UInt64?) {
        self.id = id
        self.txType = txType
        self.status = status
        self.value = value
        self.fee = fee
        self.invoice = invoice
        self.message = message
        self.timestamp = timestamp
        self.preimage = preimage
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }
}



extension LightningActivity: Equatable, Hashable {
    public static func ==(lhs: LightningActivity, rhs: LightningActivity) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.txType != rhs.txType {
            return false
        }
        if lhs.status != rhs.status {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.fee != rhs.fee {
            return false
        }
        if lhs.invoice != rhs.invoice {
            return false
        }
        if lhs.message != rhs.message {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        if lhs.preimage != rhs.preimage {
            return false
        }
        if lhs.createdAt != rhs.createdAt {
            return false
        }
        if lhs.updatedAt != rhs.updatedAt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(txType)
        hasher.combine(status)
        hasher.combine(value)
        hasher.combine(fee)
        hasher.combine(invoice)
        hasher.combine(message)
        hasher.combine(timestamp)
        hasher.combine(preimage)
        hasher.combine(createdAt)
        hasher.combine(updatedAt)
    }
}


public struct FfiConverterTypeLightningActivity: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LightningActivity {
        return
            try LightningActivity(
                id: FfiConverterString.read(from: &buf), 
                txType: FfiConverterTypePaymentType.read(from: &buf), 
                status: FfiConverterTypePaymentState.read(from: &buf), 
                value: FfiConverterUInt64.read(from: &buf), 
                fee: FfiConverterOptionUInt64.read(from: &buf), 
                invoice: FfiConverterString.read(from: &buf), 
                message: FfiConverterString.read(from: &buf), 
                timestamp: FfiConverterUInt64.read(from: &buf), 
                preimage: FfiConverterOptionString.read(from: &buf), 
                createdAt: FfiConverterOptionUInt64.read(from: &buf), 
                updatedAt: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: LightningActivity, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterTypePaymentType.write(value.txType, into: &buf)
        FfiConverterTypePaymentState.write(value.status, into: &buf)
        FfiConverterUInt64.write(value.value, into: &buf)
        FfiConverterOptionUInt64.write(value.fee, into: &buf)
        FfiConverterString.write(value.invoice, into: &buf)
        FfiConverterString.write(value.message, into: &buf)
        FfiConverterUInt64.write(value.timestamp, into: &buf)
        FfiConverterOptionString.write(value.preimage, into: &buf)
        FfiConverterOptionUInt64.write(value.createdAt, into: &buf)
        FfiConverterOptionUInt64.write(value.updatedAt, into: &buf)
    }
}


public func FfiConverterTypeLightningActivity_lift(_ buf: RustBuffer) throws -> LightningActivity {
    return try FfiConverterTypeLightningActivity.lift(buf)
}

public func FfiConverterTypeLightningActivity_lower(_ value: LightningActivity) -> RustBuffer {
    return FfiConverterTypeLightningActivity.lower(value)
}


public struct LightningInvoice {
    public var bolt11: String
    public var paymentHash: Data
    public var amountSatoshis: UInt64
    public var timestampSeconds: UInt64
    public var expirySeconds: UInt64
    public var isExpired: Bool
    public var description: String?
    public var networkType: NetworkType
    public var payeeNodeId: Data?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(bolt11: String, paymentHash: Data, amountSatoshis: UInt64, timestampSeconds: UInt64, expirySeconds: UInt64, isExpired: Bool, description: String?, networkType: NetworkType, payeeNodeId: Data?) {
        self.bolt11 = bolt11
        self.paymentHash = paymentHash
        self.amountSatoshis = amountSatoshis
        self.timestampSeconds = timestampSeconds
        self.expirySeconds = expirySeconds
        self.isExpired = isExpired
        self.description = description
        self.networkType = networkType
        self.payeeNodeId = payeeNodeId
    }
}



extension LightningInvoice: Equatable, Hashable {
    public static func ==(lhs: LightningInvoice, rhs: LightningInvoice) -> Bool {
        if lhs.bolt11 != rhs.bolt11 {
            return false
        }
        if lhs.paymentHash != rhs.paymentHash {
            return false
        }
        if lhs.amountSatoshis != rhs.amountSatoshis {
            return false
        }
        if lhs.timestampSeconds != rhs.timestampSeconds {
            return false
        }
        if lhs.expirySeconds != rhs.expirySeconds {
            return false
        }
        if lhs.isExpired != rhs.isExpired {
            return false
        }
        if lhs.description != rhs.description {
            return false
        }
        if lhs.networkType != rhs.networkType {
            return false
        }
        if lhs.payeeNodeId != rhs.payeeNodeId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bolt11)
        hasher.combine(paymentHash)
        hasher.combine(amountSatoshis)
        hasher.combine(timestampSeconds)
        hasher.combine(expirySeconds)
        hasher.combine(isExpired)
        hasher.combine(description)
        hasher.combine(networkType)
        hasher.combine(payeeNodeId)
    }
}


public struct FfiConverterTypeLightningInvoice: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LightningInvoice {
        return
            try LightningInvoice(
                bolt11: FfiConverterString.read(from: &buf), 
                paymentHash: FfiConverterData.read(from: &buf), 
                amountSatoshis: FfiConverterUInt64.read(from: &buf), 
                timestampSeconds: FfiConverterUInt64.read(from: &buf), 
                expirySeconds: FfiConverterUInt64.read(from: &buf), 
                isExpired: FfiConverterBool.read(from: &buf), 
                description: FfiConverterOptionString.read(from: &buf), 
                networkType: FfiConverterTypeNetworkType.read(from: &buf), 
                payeeNodeId: FfiConverterOptionData.read(from: &buf)
        )
    }

    public static func write(_ value: LightningInvoice, into buf: inout [UInt8]) {
        FfiConverterString.write(value.bolt11, into: &buf)
        FfiConverterData.write(value.paymentHash, into: &buf)
        FfiConverterUInt64.write(value.amountSatoshis, into: &buf)
        FfiConverterUInt64.write(value.timestampSeconds, into: &buf)
        FfiConverterUInt64.write(value.expirySeconds, into: &buf)
        FfiConverterBool.write(value.isExpired, into: &buf)
        FfiConverterOptionString.write(value.description, into: &buf)
        FfiConverterTypeNetworkType.write(value.networkType, into: &buf)
        FfiConverterOptionData.write(value.payeeNodeId, into: &buf)
    }
}


public func FfiConverterTypeLightningInvoice_lift(_ buf: RustBuffer) throws -> LightningInvoice {
    return try FfiConverterTypeLightningInvoice.lift(buf)
}

public func FfiConverterTypeLightningInvoice_lower(_ value: LightningInvoice) -> RustBuffer {
    return FfiConverterTypeLightningInvoice.lower(value)
}


public struct LnurlAddressData {
    public var uri: String
    public var domain: String
    public var username: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, domain: String, username: String) {
        self.uri = uri
        self.domain = domain
        self.username = username
    }
}



extension LnurlAddressData: Equatable, Hashable {
    public static func ==(lhs: LnurlAddressData, rhs: LnurlAddressData) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.domain != rhs.domain {
            return false
        }
        if lhs.username != rhs.username {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(domain)
        hasher.combine(username)
    }
}


public struct FfiConverterTypeLnurlAddressData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlAddressData {
        return
            try LnurlAddressData(
                uri: FfiConverterString.read(from: &buf), 
                domain: FfiConverterString.read(from: &buf), 
                username: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LnurlAddressData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.domain, into: &buf)
        FfiConverterString.write(value.username, into: &buf)
    }
}


public func FfiConverterTypeLnurlAddressData_lift(_ buf: RustBuffer) throws -> LnurlAddressData {
    return try FfiConverterTypeLnurlAddressData.lift(buf)
}

public func FfiConverterTypeLnurlAddressData_lower(_ value: LnurlAddressData) -> RustBuffer {
    return FfiConverterTypeLnurlAddressData.lower(value)
}


public struct LnurlAuthData {
    public var uri: String
    public var tag: String
    public var k1: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, tag: String, k1: String) {
        self.uri = uri
        self.tag = tag
        self.k1 = k1
    }
}



extension LnurlAuthData: Equatable, Hashable {
    public static func ==(lhs: LnurlAuthData, rhs: LnurlAuthData) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.tag != rhs.tag {
            return false
        }
        if lhs.k1 != rhs.k1 {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(tag)
        hasher.combine(k1)
    }
}


public struct FfiConverterTypeLnurlAuthData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlAuthData {
        return
            try LnurlAuthData(
                uri: FfiConverterString.read(from: &buf), 
                tag: FfiConverterString.read(from: &buf), 
                k1: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LnurlAuthData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.tag, into: &buf)
        FfiConverterString.write(value.k1, into: &buf)
    }
}


public func FfiConverterTypeLnurlAuthData_lift(_ buf: RustBuffer) throws -> LnurlAuthData {
    return try FfiConverterTypeLnurlAuthData.lift(buf)
}

public func FfiConverterTypeLnurlAuthData_lower(_ value: LnurlAuthData) -> RustBuffer {
    return FfiConverterTypeLnurlAuthData.lower(value)
}


public struct LnurlChannelData {
    public var uri: String
    public var callback: String
    public var k1: String
    public var tag: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, callback: String, k1: String, tag: String) {
        self.uri = uri
        self.callback = callback
        self.k1 = k1
        self.tag = tag
    }
}



extension LnurlChannelData: Equatable, Hashable {
    public static func ==(lhs: LnurlChannelData, rhs: LnurlChannelData) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.callback != rhs.callback {
            return false
        }
        if lhs.k1 != rhs.k1 {
            return false
        }
        if lhs.tag != rhs.tag {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(callback)
        hasher.combine(k1)
        hasher.combine(tag)
    }
}


public struct FfiConverterTypeLnurlChannelData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlChannelData {
        return
            try LnurlChannelData(
                uri: FfiConverterString.read(from: &buf), 
                callback: FfiConverterString.read(from: &buf), 
                k1: FfiConverterString.read(from: &buf), 
                tag: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LnurlChannelData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.callback, into: &buf)
        FfiConverterString.write(value.k1, into: &buf)
        FfiConverterString.write(value.tag, into: &buf)
    }
}


public func FfiConverterTypeLnurlChannelData_lift(_ buf: RustBuffer) throws -> LnurlChannelData {
    return try FfiConverterTypeLnurlChannelData.lift(buf)
}

public func FfiConverterTypeLnurlChannelData_lower(_ value: LnurlChannelData) -> RustBuffer {
    return FfiConverterTypeLnurlChannelData.lower(value)
}


public struct LnurlPayData {
    public var uri: String
    public var callback: String
    public var minSendable: UInt64
    public var maxSendable: UInt64
    public var metadataStr: String
    public var commentAllowed: UInt32?
    public var allowsNostr: Bool
    public var nostrPubkey: Data?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, callback: String, minSendable: UInt64, maxSendable: UInt64, metadataStr: String, commentAllowed: UInt32?, allowsNostr: Bool, nostrPubkey: Data?) {
        self.uri = uri
        self.callback = callback
        self.minSendable = minSendable
        self.maxSendable = maxSendable
        self.metadataStr = metadataStr
        self.commentAllowed = commentAllowed
        self.allowsNostr = allowsNostr
        self.nostrPubkey = nostrPubkey
    }
}



extension LnurlPayData: Equatable, Hashable {
    public static func ==(lhs: LnurlPayData, rhs: LnurlPayData) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.callback != rhs.callback {
            return false
        }
        if lhs.minSendable != rhs.minSendable {
            return false
        }
        if lhs.maxSendable != rhs.maxSendable {
            return false
        }
        if lhs.metadataStr != rhs.metadataStr {
            return false
        }
        if lhs.commentAllowed != rhs.commentAllowed {
            return false
        }
        if lhs.allowsNostr != rhs.allowsNostr {
            return false
        }
        if lhs.nostrPubkey != rhs.nostrPubkey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(callback)
        hasher.combine(minSendable)
        hasher.combine(maxSendable)
        hasher.combine(metadataStr)
        hasher.combine(commentAllowed)
        hasher.combine(allowsNostr)
        hasher.combine(nostrPubkey)
    }
}


public struct FfiConverterTypeLnurlPayData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlPayData {
        return
            try LnurlPayData(
                uri: FfiConverterString.read(from: &buf), 
                callback: FfiConverterString.read(from: &buf), 
                minSendable: FfiConverterUInt64.read(from: &buf), 
                maxSendable: FfiConverterUInt64.read(from: &buf), 
                metadataStr: FfiConverterString.read(from: &buf), 
                commentAllowed: FfiConverterOptionUInt32.read(from: &buf), 
                allowsNostr: FfiConverterBool.read(from: &buf), 
                nostrPubkey: FfiConverterOptionData.read(from: &buf)
        )
    }

    public static func write(_ value: LnurlPayData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.callback, into: &buf)
        FfiConverterUInt64.write(value.minSendable, into: &buf)
        FfiConverterUInt64.write(value.maxSendable, into: &buf)
        FfiConverterString.write(value.metadataStr, into: &buf)
        FfiConverterOptionUInt32.write(value.commentAllowed, into: &buf)
        FfiConverterBool.write(value.allowsNostr, into: &buf)
        FfiConverterOptionData.write(value.nostrPubkey, into: &buf)
    }
}


public func FfiConverterTypeLnurlPayData_lift(_ buf: RustBuffer) throws -> LnurlPayData {
    return try FfiConverterTypeLnurlPayData.lift(buf)
}

public func FfiConverterTypeLnurlPayData_lower(_ value: LnurlPayData) -> RustBuffer {
    return FfiConverterTypeLnurlPayData.lower(value)
}


public struct LnurlWithdrawData {
    public var uri: String
    public var callback: String
    public var k1: String
    public var defaultDescription: String
    public var minWithdrawable: UInt64?
    public var maxWithdrawable: UInt64
    public var tag: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, callback: String, k1: String, defaultDescription: String, minWithdrawable: UInt64?, maxWithdrawable: UInt64, tag: String) {
        self.uri = uri
        self.callback = callback
        self.k1 = k1
        self.defaultDescription = defaultDescription
        self.minWithdrawable = minWithdrawable
        self.maxWithdrawable = maxWithdrawable
        self.tag = tag
    }
}



extension LnurlWithdrawData: Equatable, Hashable {
    public static func ==(lhs: LnurlWithdrawData, rhs: LnurlWithdrawData) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.callback != rhs.callback {
            return false
        }
        if lhs.k1 != rhs.k1 {
            return false
        }
        if lhs.defaultDescription != rhs.defaultDescription {
            return false
        }
        if lhs.minWithdrawable != rhs.minWithdrawable {
            return false
        }
        if lhs.maxWithdrawable != rhs.maxWithdrawable {
            return false
        }
        if lhs.tag != rhs.tag {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(callback)
        hasher.combine(k1)
        hasher.combine(defaultDescription)
        hasher.combine(minWithdrawable)
        hasher.combine(maxWithdrawable)
        hasher.combine(tag)
    }
}


public struct FfiConverterTypeLnurlWithdrawData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlWithdrawData {
        return
            try LnurlWithdrawData(
                uri: FfiConverterString.read(from: &buf), 
                callback: FfiConverterString.read(from: &buf), 
                k1: FfiConverterString.read(from: &buf), 
                defaultDescription: FfiConverterString.read(from: &buf), 
                minWithdrawable: FfiConverterOptionUInt64.read(from: &buf), 
                maxWithdrawable: FfiConverterUInt64.read(from: &buf), 
                tag: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LnurlWithdrawData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.callback, into: &buf)
        FfiConverterString.write(value.k1, into: &buf)
        FfiConverterString.write(value.defaultDescription, into: &buf)
        FfiConverterOptionUInt64.write(value.minWithdrawable, into: &buf)
        FfiConverterUInt64.write(value.maxWithdrawable, into: &buf)
        FfiConverterString.write(value.tag, into: &buf)
    }
}


public func FfiConverterTypeLnurlWithdrawData_lift(_ buf: RustBuffer) throws -> LnurlWithdrawData {
    return try FfiConverterTypeLnurlWithdrawData.lift(buf)
}

public func FfiConverterTypeLnurlWithdrawData_lower(_ value: LnurlWithdrawData) -> RustBuffer {
    return FfiConverterTypeLnurlWithdrawData.lower(value)
}


public struct OnChainInvoice {
    public var address: String
    public var amountSatoshis: UInt64
    public var label: String?
    public var message: String?
    public var params: [String: String]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(address: String, amountSatoshis: UInt64, label: String?, message: String?, params: [String: String]?) {
        self.address = address
        self.amountSatoshis = amountSatoshis
        self.label = label
        self.message = message
        self.params = params
    }
}



extension OnChainInvoice: Equatable, Hashable {
    public static func ==(lhs: OnChainInvoice, rhs: OnChainInvoice) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.amountSatoshis != rhs.amountSatoshis {
            return false
        }
        if lhs.label != rhs.label {
            return false
        }
        if lhs.message != rhs.message {
            return false
        }
        if lhs.params != rhs.params {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(amountSatoshis)
        hasher.combine(label)
        hasher.combine(message)
        hasher.combine(params)
    }
}


public struct FfiConverterTypeOnChainInvoice: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OnChainInvoice {
        return
            try OnChainInvoice(
                address: FfiConverterString.read(from: &buf), 
                amountSatoshis: FfiConverterUInt64.read(from: &buf), 
                label: FfiConverterOptionString.read(from: &buf), 
                message: FfiConverterOptionString.read(from: &buf), 
                params: FfiConverterOptionDictionaryStringString.read(from: &buf)
        )
    }

    public static func write(_ value: OnChainInvoice, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterUInt64.write(value.amountSatoshis, into: &buf)
        FfiConverterOptionString.write(value.label, into: &buf)
        FfiConverterOptionString.write(value.message, into: &buf)
        FfiConverterOptionDictionaryStringString.write(value.params, into: &buf)
    }
}


public func FfiConverterTypeOnChainInvoice_lift(_ buf: RustBuffer) throws -> OnChainInvoice {
    return try FfiConverterTypeOnChainInvoice.lift(buf)
}

public func FfiConverterTypeOnChainInvoice_lower(_ value: OnChainInvoice) -> RustBuffer {
    return FfiConverterTypeOnChainInvoice.lower(value)
}


public struct OnchainActivity {
    public var id: String
    public var txType: PaymentType
    public var txId: String
    public var value: UInt64
    public var fee: UInt64
    public var feeRate: UInt64
    public var address: String
    public var confirmed: Bool
    public var timestamp: UInt64
    public var isBoosted: Bool
    public var isTransfer: Bool
    public var doesExist: Bool
    public var confirmTimestamp: UInt64?
    public var channelId: String?
    public var transferTxId: String?
    public var createdAt: UInt64?
    public var updatedAt: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, txType: PaymentType, txId: String, value: UInt64, fee: UInt64, feeRate: UInt64, address: String, confirmed: Bool, timestamp: UInt64, isBoosted: Bool, isTransfer: Bool, doesExist: Bool, confirmTimestamp: UInt64?, channelId: String?, transferTxId: String?, createdAt: UInt64?, updatedAt: UInt64?) {
        self.id = id
        self.txType = txType
        self.txId = txId
        self.value = value
        self.fee = fee
        self.feeRate = feeRate
        self.address = address
        self.confirmed = confirmed
        self.timestamp = timestamp
        self.isBoosted = isBoosted
        self.isTransfer = isTransfer
        self.doesExist = doesExist
        self.confirmTimestamp = confirmTimestamp
        self.channelId = channelId
        self.transferTxId = transferTxId
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }
}



extension OnchainActivity: Equatable, Hashable {
    public static func ==(lhs: OnchainActivity, rhs: OnchainActivity) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.txType != rhs.txType {
            return false
        }
        if lhs.txId != rhs.txId {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.fee != rhs.fee {
            return false
        }
        if lhs.feeRate != rhs.feeRate {
            return false
        }
        if lhs.address != rhs.address {
            return false
        }
        if lhs.confirmed != rhs.confirmed {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        if lhs.isBoosted != rhs.isBoosted {
            return false
        }
        if lhs.isTransfer != rhs.isTransfer {
            return false
        }
        if lhs.doesExist != rhs.doesExist {
            return false
        }
        if lhs.confirmTimestamp != rhs.confirmTimestamp {
            return false
        }
        if lhs.channelId != rhs.channelId {
            return false
        }
        if lhs.transferTxId != rhs.transferTxId {
            return false
        }
        if lhs.createdAt != rhs.createdAt {
            return false
        }
        if lhs.updatedAt != rhs.updatedAt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(txType)
        hasher.combine(txId)
        hasher.combine(value)
        hasher.combine(fee)
        hasher.combine(feeRate)
        hasher.combine(address)
        hasher.combine(confirmed)
        hasher.combine(timestamp)
        hasher.combine(isBoosted)
        hasher.combine(isTransfer)
        hasher.combine(doesExist)
        hasher.combine(confirmTimestamp)
        hasher.combine(channelId)
        hasher.combine(transferTxId)
        hasher.combine(createdAt)
        hasher.combine(updatedAt)
    }
}


public struct FfiConverterTypeOnchainActivity: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OnchainActivity {
        return
            try OnchainActivity(
                id: FfiConverterString.read(from: &buf), 
                txType: FfiConverterTypePaymentType.read(from: &buf), 
                txId: FfiConverterString.read(from: &buf), 
                value: FfiConverterUInt64.read(from: &buf), 
                fee: FfiConverterUInt64.read(from: &buf), 
                feeRate: FfiConverterUInt64.read(from: &buf), 
                address: FfiConverterString.read(from: &buf), 
                confirmed: FfiConverterBool.read(from: &buf), 
                timestamp: FfiConverterUInt64.read(from: &buf), 
                isBoosted: FfiConverterBool.read(from: &buf), 
                isTransfer: FfiConverterBool.read(from: &buf), 
                doesExist: FfiConverterBool.read(from: &buf), 
                confirmTimestamp: FfiConverterOptionUInt64.read(from: &buf), 
                channelId: FfiConverterOptionString.read(from: &buf), 
                transferTxId: FfiConverterOptionString.read(from: &buf), 
                createdAt: FfiConverterOptionUInt64.read(from: &buf), 
                updatedAt: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: OnchainActivity, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterTypePaymentType.write(value.txType, into: &buf)
        FfiConverterString.write(value.txId, into: &buf)
        FfiConverterUInt64.write(value.value, into: &buf)
        FfiConverterUInt64.write(value.fee, into: &buf)
        FfiConverterUInt64.write(value.feeRate, into: &buf)
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterBool.write(value.confirmed, into: &buf)
        FfiConverterUInt64.write(value.timestamp, into: &buf)
        FfiConverterBool.write(value.isBoosted, into: &buf)
        FfiConverterBool.write(value.isTransfer, into: &buf)
        FfiConverterBool.write(value.doesExist, into: &buf)
        FfiConverterOptionUInt64.write(value.confirmTimestamp, into: &buf)
        FfiConverterOptionString.write(value.channelId, into: &buf)
        FfiConverterOptionString.write(value.transferTxId, into: &buf)
        FfiConverterOptionUInt64.write(value.createdAt, into: &buf)
        FfiConverterOptionUInt64.write(value.updatedAt, into: &buf)
    }
}


public func FfiConverterTypeOnchainActivity_lift(_ buf: RustBuffer) throws -> OnchainActivity {
    return try FfiConverterTypeOnchainActivity.lift(buf)
}

public func FfiConverterTypeOnchainActivity_lower(_ value: OnchainActivity) -> RustBuffer {
    return FfiConverterTypeOnchainActivity.lower(value)
}


public struct PubkyAuth {
    public var data: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(data: String) {
        self.data = data
    }
}



extension PubkyAuth: Equatable, Hashable {
    public static func ==(lhs: PubkyAuth, rhs: PubkyAuth) -> Bool {
        if lhs.data != rhs.data {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(data)
    }
}


public struct FfiConverterTypePubkyAuth: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PubkyAuth {
        return
            try PubkyAuth(
                data: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: PubkyAuth, into buf: inout [UInt8]) {
        FfiConverterString.write(value.data, into: &buf)
    }
}


public func FfiConverterTypePubkyAuth_lift(_ buf: RustBuffer) throws -> PubkyAuth {
    return try FfiConverterTypePubkyAuth.lift(buf)
}

public func FfiConverterTypePubkyAuth_lower(_ value: PubkyAuth) -> RustBuffer {
    return FfiConverterTypePubkyAuth.lower(value)
}


public struct ValidationResult {
    public var address: String
    public var network: NetworkType
    public var addressType: AddressType

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(address: String, network: NetworkType, addressType: AddressType) {
        self.address = address
        self.network = network
        self.addressType = addressType
    }
}



extension ValidationResult: Equatable, Hashable {
    public static func ==(lhs: ValidationResult, rhs: ValidationResult) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.network != rhs.network {
            return false
        }
        if lhs.addressType != rhs.addressType {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(network)
        hasher.combine(addressType)
    }
}


public struct FfiConverterTypeValidationResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ValidationResult {
        return
            try ValidationResult(
                address: FfiConverterString.read(from: &buf), 
                network: FfiConverterTypeNetworkType.read(from: &buf), 
                addressType: FfiConverterTypeAddressType.read(from: &buf)
        )
    }

    public static func write(_ value: ValidationResult, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterTypeNetworkType.write(value.network, into: &buf)
        FfiConverterTypeAddressType.write(value.addressType, into: &buf)
    }
}


public func FfiConverterTypeValidationResult_lift(_ buf: RustBuffer) throws -> ValidationResult {
    return try FfiConverterTypeValidationResult.lift(buf)
}

public func FfiConverterTypeValidationResult_lower(_ value: ValidationResult) -> RustBuffer {
    return FfiConverterTypeValidationResult.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Activity {
    
    case onchain(OnchainActivity
    )
    case lightning(LightningActivity
    )
}


public struct FfiConverterTypeActivity: FfiConverterRustBuffer {
    typealias SwiftType = Activity

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Activity {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .onchain(try FfiConverterTypeOnchainActivity.read(from: &buf)
        )
        
        case 2: return .lightning(try FfiConverterTypeLightningActivity.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Activity, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .onchain(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeOnchainActivity.write(v1, into: &buf)
            
        
        case let .lightning(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeLightningActivity.write(v1, into: &buf)
            
        }
    }
}


public func FfiConverterTypeActivity_lift(_ buf: RustBuffer) throws -> Activity {
    return try FfiConverterTypeActivity.lift(buf)
}

public func FfiConverterTypeActivity_lower(_ value: Activity) -> RustBuffer {
    return FfiConverterTypeActivity.lower(value)
}



extension Activity: Equatable, Hashable {}




public enum ActivityError {

    
    
    case InvalidActivity
    case InitializationError(message: String
    )
    case InsertError(message: String
    )
    case RetrievalError(message: String
    )
    case DataError(message: String
    )
    case ConnectionError(message: String
    )
    case SerializationError(message: String
    )
}


public struct FfiConverterTypeActivityError: FfiConverterRustBuffer {
    typealias SwiftType = ActivityError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ActivityError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidActivity
        case 2: return .InitializationError(
            message: try FfiConverterString.read(from: &buf)
            )
        case 3: return .InsertError(
            message: try FfiConverterString.read(from: &buf)
            )
        case 4: return .RetrievalError(
            message: try FfiConverterString.read(from: &buf)
            )
        case 5: return .DataError(
            message: try FfiConverterString.read(from: &buf)
            )
        case 6: return .ConnectionError(
            message: try FfiConverterString.read(from: &buf)
            )
        case 7: return .SerializationError(
            message: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ActivityError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .InvalidActivity:
            writeInt(&buf, Int32(1))
        
        
        case let .InitializationError(message):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(message, into: &buf)
            
        
        case let .InsertError(message):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(message, into: &buf)
            
        
        case let .RetrievalError(message):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(message, into: &buf)
            
        
        case let .DataError(message):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(message, into: &buf)
            
        
        case let .ConnectionError(message):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(message, into: &buf)
            
        
        case let .SerializationError(message):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(message, into: &buf)
            
        }
    }
}


extension ActivityError: Equatable, Hashable {}

extension ActivityError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ActivityFilter {
    
    case all
    case lightning
    case onchain
}


public struct FfiConverterTypeActivityFilter: FfiConverterRustBuffer {
    typealias SwiftType = ActivityFilter

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ActivityFilter {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .all
        
        case 2: return .lightning
        
        case 3: return .onchain
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ActivityFilter, into buf: inout [UInt8]) {
        switch value {
        
        
        case .all:
            writeInt(&buf, Int32(1))
        
        
        case .lightning:
            writeInt(&buf, Int32(2))
        
        
        case .onchain:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypeActivityFilter_lift(_ buf: RustBuffer) throws -> ActivityFilter {
    return try FfiConverterTypeActivityFilter.lift(buf)
}

public func FfiConverterTypeActivityFilter_lower(_ value: ActivityFilter) -> RustBuffer {
    return FfiConverterTypeActivityFilter.lower(value)
}



extension ActivityFilter: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ActivityType {
    
    case onchain
    case lightning
}


public struct FfiConverterTypeActivityType: FfiConverterRustBuffer {
    typealias SwiftType = ActivityType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ActivityType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .onchain
        
        case 2: return .lightning
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ActivityType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .onchain:
            writeInt(&buf, Int32(1))
        
        
        case .lightning:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeActivityType_lift(_ buf: RustBuffer) throws -> ActivityType {
    return try FfiConverterTypeActivityType.lift(buf)
}

public func FfiConverterTypeActivityType_lower(_ value: ActivityType) -> RustBuffer {
    return FfiConverterTypeActivityType.lower(value)
}



extension ActivityType: Equatable, Hashable {}




public enum AddressError {

    
    
    case InvalidAddress
    case InvalidNetwork
}


public struct FfiConverterTypeAddressError: FfiConverterRustBuffer {
    typealias SwiftType = AddressError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidAddress
        case 2: return .InvalidNetwork

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AddressError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .InvalidAddress:
            writeInt(&buf, Int32(1))
        
        
        case .InvalidNetwork:
            writeInt(&buf, Int32(2))
        
        }
    }
}


extension AddressError: Equatable, Hashable {}

extension AddressError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AddressType {
    
    case p2pkh
    case p2sh
    case p2wpkh
    case p2wsh
    case p2tr
    case unknown
}


public struct FfiConverterTypeAddressType: FfiConverterRustBuffer {
    typealias SwiftType = AddressType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .p2pkh
        
        case 2: return .p2sh
        
        case 3: return .p2wpkh
        
        case 4: return .p2wsh
        
        case 5: return .p2tr
        
        case 6: return .unknown
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AddressType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .p2pkh:
            writeInt(&buf, Int32(1))
        
        
        case .p2sh:
            writeInt(&buf, Int32(2))
        
        
        case .p2wpkh:
            writeInt(&buf, Int32(3))
        
        
        case .p2wsh:
            writeInt(&buf, Int32(4))
        
        
        case .p2tr:
            writeInt(&buf, Int32(5))
        
        
        case .unknown:
            writeInt(&buf, Int32(6))
        
        }
    }
}


public func FfiConverterTypeAddressType_lift(_ buf: RustBuffer) throws -> AddressType {
    return try FfiConverterTypeAddressType.lift(buf)
}

public func FfiConverterTypeAddressType_lower(_ value: AddressType) -> RustBuffer {
    return FfiConverterTypeAddressType.lower(value)
}



extension AddressType: Equatable, Hashable {}




public enum DbError {

    
    
    case ActivityError(ActivityError
    )
    case InitializationError(message: String
    )
}


public struct FfiConverterTypeDbError: FfiConverterRustBuffer {
    typealias SwiftType = DbError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DbError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .ActivityError(try FfiConverterTypeActivityError.read(from: &buf))
        case 2: return .InitializationError(message: try FfiConverterString.read(from: &buf))
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }
    public static func write(_ value: DbError, into buf: inout [UInt8]) {
        switch value {
        case let .ActivityError(error):
            writeInt(&buf, Int32(1))
            FfiConverterTypeActivityError.write(error, into: &buf)
        case let .InitializationError(message):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(message, into: &buf)
        }
    }
}


extension DbError: Equatable, Hashable {}

extension DbError: Error { }


public enum DecodingError {

    
    
    case InvalidFormat
    case InvalidNetwork
    case InvalidAmount
    case InvalidLnurlPayAmount(amountSatoshis: UInt64, min: UInt64, max: UInt64
    )
    case InvalidTimestamp
    case InvalidChecksum
    case InvalidResponse
    case UnsupportedType
    case InvalidAddress
    case RequestFailed
    case ClientCreationFailed
    case InvoiceCreationFailed(errorMessage: String
    )
}


public struct FfiConverterTypeDecodingError: FfiConverterRustBuffer {
    typealias SwiftType = DecodingError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DecodingError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidFormat
        case 2: return .InvalidNetwork
        case 3: return .InvalidAmount
        case 4: return .InvalidLnurlPayAmount(
            amountSatoshis: try FfiConverterUInt64.read(from: &buf), 
            min: try FfiConverterUInt64.read(from: &buf), 
            max: try FfiConverterUInt64.read(from: &buf)
            )
        case 5: return .InvalidTimestamp
        case 6: return .InvalidChecksum
        case 7: return .InvalidResponse
        case 8: return .UnsupportedType
        case 9: return .InvalidAddress
        case 10: return .RequestFailed
        case 11: return .ClientCreationFailed
        case 12: return .InvoiceCreationFailed(
            errorMessage: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DecodingError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .InvalidFormat:
            writeInt(&buf, Int32(1))
        
        
        case .InvalidNetwork:
            writeInt(&buf, Int32(2))
        
        
        case .InvalidAmount:
            writeInt(&buf, Int32(3))
        
        
        case let .InvalidLnurlPayAmount(amountSatoshis,min,max):
            writeInt(&buf, Int32(4))
            FfiConverterUInt64.write(amountSatoshis, into: &buf)
            FfiConverterUInt64.write(min, into: &buf)
            FfiConverterUInt64.write(max, into: &buf)
            
        
        case .InvalidTimestamp:
            writeInt(&buf, Int32(5))
        
        
        case .InvalidChecksum:
            writeInt(&buf, Int32(6))
        
        
        case .InvalidResponse:
            writeInt(&buf, Int32(7))
        
        
        case .UnsupportedType:
            writeInt(&buf, Int32(8))
        
        
        case .InvalidAddress:
            writeInt(&buf, Int32(9))
        
        
        case .RequestFailed:
            writeInt(&buf, Int32(10))
        
        
        case .ClientCreationFailed:
            writeInt(&buf, Int32(11))
        
        
        case let .InvoiceCreationFailed(errorMessage):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(errorMessage, into: &buf)
            
        }
    }
}


extension DecodingError: Equatable, Hashable {}

extension DecodingError: Error { }


public enum LnurlError {

    
    
    case InvalidAddress
    case ClientCreationFailed
    case RequestFailed
    case InvalidResponse
    case InvalidAmount(amountSatoshis: UInt64, min: UInt64, max: UInt64
    )
    case InvoiceCreationFailed(errorDetails: String
    )
}


public struct FfiConverterTypeLnurlError: FfiConverterRustBuffer {
    typealias SwiftType = LnurlError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidAddress
        case 2: return .ClientCreationFailed
        case 3: return .RequestFailed
        case 4: return .InvalidResponse
        case 5: return .InvalidAmount(
            amountSatoshis: try FfiConverterUInt64.read(from: &buf), 
            min: try FfiConverterUInt64.read(from: &buf), 
            max: try FfiConverterUInt64.read(from: &buf)
            )
        case 6: return .InvoiceCreationFailed(
            errorDetails: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LnurlError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .InvalidAddress:
            writeInt(&buf, Int32(1))
        
        
        case .ClientCreationFailed:
            writeInt(&buf, Int32(2))
        
        
        case .RequestFailed:
            writeInt(&buf, Int32(3))
        
        
        case .InvalidResponse:
            writeInt(&buf, Int32(4))
        
        
        case let .InvalidAmount(amountSatoshis,min,max):
            writeInt(&buf, Int32(5))
            FfiConverterUInt64.write(amountSatoshis, into: &buf)
            FfiConverterUInt64.write(min, into: &buf)
            FfiConverterUInt64.write(max, into: &buf)
            
        
        case let .InvoiceCreationFailed(errorDetails):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(errorDetails, into: &buf)
            
        }
    }
}


extension LnurlError: Equatable, Hashable {}

extension LnurlError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum NetworkType {
    
    case bitcoin
    case testnet
    case regtest
    case signet
}


public struct FfiConverterTypeNetworkType: FfiConverterRustBuffer {
    typealias SwiftType = NetworkType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NetworkType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .bitcoin
        
        case 2: return .testnet
        
        case 3: return .regtest
        
        case 4: return .signet
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NetworkType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .bitcoin:
            writeInt(&buf, Int32(1))
        
        
        case .testnet:
            writeInt(&buf, Int32(2))
        
        
        case .regtest:
            writeInt(&buf, Int32(3))
        
        
        case .signet:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeNetworkType_lift(_ buf: RustBuffer) throws -> NetworkType {
    return try FfiConverterTypeNetworkType.lift(buf)
}

public func FfiConverterTypeNetworkType_lower(_ value: NetworkType) -> RustBuffer {
    return FfiConverterTypeNetworkType.lower(value)
}



extension NetworkType: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PaymentState {
    
    case pending
    case succeeded
    case failed
}


public struct FfiConverterTypePaymentState: FfiConverterRustBuffer {
    typealias SwiftType = PaymentState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .pending
        
        case 2: return .succeeded
        
        case 3: return .failed
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .pending:
            writeInt(&buf, Int32(1))
        
        
        case .succeeded:
            writeInt(&buf, Int32(2))
        
        
        case .failed:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypePaymentState_lift(_ buf: RustBuffer) throws -> PaymentState {
    return try FfiConverterTypePaymentState.lift(buf)
}

public func FfiConverterTypePaymentState_lower(_ value: PaymentState) -> RustBuffer {
    return FfiConverterTypePaymentState.lower(value)
}



extension PaymentState: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PaymentType {
    
    case sent
    case received
}


public struct FfiConverterTypePaymentType: FfiConverterRustBuffer {
    typealias SwiftType = PaymentType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .sent
        
        case 2: return .received
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .sent:
            writeInt(&buf, Int32(1))
        
        
        case .received:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypePaymentType_lift(_ buf: RustBuffer) throws -> PaymentType {
    return try FfiConverterTypePaymentType.lift(buf)
}

public func FfiConverterTypePaymentType_lower(_ value: PaymentType) -> RustBuffer {
    return FfiConverterTypePaymentType.lower(value)
}



extension PaymentType: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Scanner {
    
    case onChain(invoice: OnChainInvoice
    )
    case lightning(invoice: LightningInvoice
    )
    case pubkyAuth(data: String
    )
    case lnurlChannel(data: LnurlChannelData
    )
    case lnurlAuth(data: LnurlAuthData
    )
    case lnurlWithdraw(data: LnurlWithdrawData
    )
    case lnurlAddress(data: LnurlAddressData
    )
    case lnurlPay(data: LnurlPayData
    )
    case nodeId(url: String, network: NetworkType
    )
    case treasureHunt(chestId: String
    )
    case orangeTicket(ticketId: String
    )
}


public struct FfiConverterTypeScanner: FfiConverterRustBuffer {
    typealias SwiftType = Scanner

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Scanner {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .onChain(invoice: try FfiConverterTypeOnChainInvoice.read(from: &buf)
        )
        
        case 2: return .lightning(invoice: try FfiConverterTypeLightningInvoice.read(from: &buf)
        )
        
        case 3: return .pubkyAuth(data: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .lnurlChannel(data: try FfiConverterTypeLnurlChannelData.read(from: &buf)
        )
        
        case 5: return .lnurlAuth(data: try FfiConverterTypeLnurlAuthData.read(from: &buf)
        )
        
        case 6: return .lnurlWithdraw(data: try FfiConverterTypeLnurlWithdrawData.read(from: &buf)
        )
        
        case 7: return .lnurlAddress(data: try FfiConverterTypeLnurlAddressData.read(from: &buf)
        )
        
        case 8: return .lnurlPay(data: try FfiConverterTypeLnurlPayData.read(from: &buf)
        )
        
        case 9: return .nodeId(url: try FfiConverterString.read(from: &buf), network: try FfiConverterTypeNetworkType.read(from: &buf)
        )
        
        case 10: return .treasureHunt(chestId: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .orangeTicket(ticketId: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Scanner, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .onChain(invoice):
            writeInt(&buf, Int32(1))
            FfiConverterTypeOnChainInvoice.write(invoice, into: &buf)
            
        
        case let .lightning(invoice):
            writeInt(&buf, Int32(2))
            FfiConverterTypeLightningInvoice.write(invoice, into: &buf)
            
        
        case let .pubkyAuth(data):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(data, into: &buf)
            
        
        case let .lnurlChannel(data):
            writeInt(&buf, Int32(4))
            FfiConverterTypeLnurlChannelData.write(data, into: &buf)
            
        
        case let .lnurlAuth(data):
            writeInt(&buf, Int32(5))
            FfiConverterTypeLnurlAuthData.write(data, into: &buf)
            
        
        case let .lnurlWithdraw(data):
            writeInt(&buf, Int32(6))
            FfiConverterTypeLnurlWithdrawData.write(data, into: &buf)
            
        
        case let .lnurlAddress(data):
            writeInt(&buf, Int32(7))
            FfiConverterTypeLnurlAddressData.write(data, into: &buf)
            
        
        case let .lnurlPay(data):
            writeInt(&buf, Int32(8))
            FfiConverterTypeLnurlPayData.write(data, into: &buf)
            
        
        case let .nodeId(url,network):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(url, into: &buf)
            FfiConverterTypeNetworkType.write(network, into: &buf)
            
        
        case let .treasureHunt(chestId):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(chestId, into: &buf)
            
        
        case let .orangeTicket(ticketId):
            writeInt(&buf, Int32(11))
            FfiConverterString.write(ticketId, into: &buf)
            
        }
    }
}


public func FfiConverterTypeScanner_lift(_ buf: RustBuffer) throws -> Scanner {
    return try FfiConverterTypeScanner.lift(buf)
}

public func FfiConverterTypeScanner_lower(_ value: Scanner) -> RustBuffer {
    return FfiConverterTypeScanner.lower(value)
}



extension Scanner: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SortDirection {
    
    case asc
    case desc
}


public struct FfiConverterTypeSortDirection: FfiConverterRustBuffer {
    typealias SwiftType = SortDirection

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SortDirection {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .asc
        
        case 2: return .desc
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SortDirection, into buf: inout [UInt8]) {
        switch value {
        
        
        case .asc:
            writeInt(&buf, Int32(1))
        
        
        case .desc:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeSortDirection_lift(_ buf: RustBuffer) throws -> SortDirection {
    return try FfiConverterTypeSortDirection.lift(buf)
}

public func FfiConverterTypeSortDirection_lower(_ value: SortDirection) -> RustBuffer {
    return FfiConverterTypeSortDirection.lower(value)
}



extension SortDirection: Equatable, Hashable {}



fileprivate struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeActivity: FfiConverterRustBuffer {
    typealias SwiftType = Activity?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeActivity.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeActivity.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeActivityFilter: FfiConverterRustBuffer {
    typealias SwiftType = ActivityFilter?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeActivityFilter.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeActivityFilter.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypePaymentType: FfiConverterRustBuffer {
    typealias SwiftType = PaymentType?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypePaymentType.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypePaymentType.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeSortDirection: FfiConverterRustBuffer {
    typealias SwiftType = SortDirection?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSortDirection.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSortDirection.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionDictionaryStringString: FfiConverterRustBuffer {
    typealias SwiftType = [String: String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryStringString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryStringString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeActivity: FfiConverterRustBuffer {
    typealias SwiftType = [Activity]

    public static func write(_ value: [Activity], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeActivity.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Activity] {
        let len: Int32 = try readInt(&buf)
        var seq = [Activity]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeActivity.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterDictionaryStringString: FfiConverterRustBuffer {
    public static func write(_ value: [String: String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: String] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: String]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}
private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}
public func addTags(activityId: String, tags: [String])throws  {try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_add_tags(
        FfiConverterString.lower(activityId),
        FfiConverterSequenceString.lower(tags),$0
    )
}
}
public func decode(invoice: String)async throws  -> Scanner {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_decode(FfiConverterString.lower(invoice)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeScanner.lift,
            errorHandler: FfiConverterTypeDecodingError.lift
        )
}
public func deleteActivityById(activityId: String)throws  -> Bool {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_delete_activity_by_id(
        FfiConverterString.lower(activityId),$0
    )
})
}
public func getActivities(filter: ActivityFilter?, txType: PaymentType?, tags: [String]?, search: String?, minDate: UInt64?, maxDate: UInt64?, limit: UInt32?, sortDirection: SortDirection?)throws  -> [Activity] {
    return try  FfiConverterSequenceTypeActivity.lift(try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_get_activities(
        FfiConverterOptionTypeActivityFilter.lower(filter),
        FfiConverterOptionTypePaymentType.lower(txType),
        FfiConverterOptionSequenceString.lower(tags),
        FfiConverterOptionString.lower(search),
        FfiConverterOptionUInt64.lower(minDate),
        FfiConverterOptionUInt64.lower(maxDate),
        FfiConverterOptionUInt32.lower(limit),
        FfiConverterOptionTypeSortDirection.lower(sortDirection),$0
    )
})
}
public func getActivitiesByTag(tag: String, limit: UInt32?, sortDirection: SortDirection?)throws  -> [Activity] {
    return try  FfiConverterSequenceTypeActivity.lift(try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_get_activities_by_tag(
        FfiConverterString.lower(tag),
        FfiConverterOptionUInt32.lower(limit),
        FfiConverterOptionTypeSortDirection.lower(sortDirection),$0
    )
})
}
public func getActivityById(activityId: String)throws  -> Activity? {
    return try  FfiConverterOptionTypeActivity.lift(try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_get_activity_by_id(
        FfiConverterString.lower(activityId),$0
    )
})
}
public func getLnurlInvoice(address: String, amountSatoshis: UInt64)async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_get_lnurl_invoice(FfiConverterString.lower(address),FfiConverterUInt64.lower(amountSatoshis)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeLnurlError.lift
        )
}
public func getTags(activityId: String)throws  -> [String] {
    return try  FfiConverterSequenceString.lift(try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_get_tags(
        FfiConverterString.lower(activityId),$0
    )
})
}
public func initDb(basePath: String)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeDbError.lift) {
    uniffi_bitkitcore_fn_func_init_db(
        FfiConverterString.lower(basePath),$0
    )
})
}
public func insertActivity(activity: Activity)throws  {try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_insert_activity(
        FfiConverterTypeActivity.lower(activity),$0
    )
}
}
public func removeTags(activityId: String, tags: [String])throws  {try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_remove_tags(
        FfiConverterString.lower(activityId),
        FfiConverterSequenceString.lower(tags),$0
    )
}
}
public func updateActivity(activityId: String, activity: Activity)throws  {try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_update_activity(
        FfiConverterString.lower(activityId),
        FfiConverterTypeActivity.lower(activity),$0
    )
}
}
public func upsertActivity(activity: Activity)throws  {try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_upsert_activity(
        FfiConverterTypeActivity.lower(activity),$0
    )
}
}
public func validateBitcoinAddress(address: String)throws  -> ValidationResult {
    return try  FfiConverterTypeValidationResult.lift(try rustCallWithError(FfiConverterTypeAddressError.lift) {
    uniffi_bitkitcore_fn_func_validate_bitcoin_address(
        FfiConverterString.lower(address),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_bitkitcore_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_bitkitcore_checksum_func_add_tags() != 63739) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_decode() != 28437) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_delete_activity_by_id() != 29867) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_activities() != 21347) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_activities_by_tag() != 52823) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_activity_by_id() != 44227) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_lnurl_invoice() != 5475) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_tags() != 11308) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_init_db() != 9643) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_insert_activity() != 1510) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_remove_tags() != 58873) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_update_activity() != 42510) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_upsert_activity() != 32175) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_validate_bitcoin_address() != 56003) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all
